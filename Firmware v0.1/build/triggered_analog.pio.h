// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ---------------- //
// triggered_analog //
// ---------------- //

#define triggered_analog_wrap_target 0
#define triggered_analog_wrap 4

static const uint16_t triggered_analog_program_instructions[] = {
            //     .wrap_target
    0x2007, //  0: wait   0 gpio, 7                  
    0x2087, //  1: wait   1 gpio, 7                  
    0xc000, //  2: irq    nowait 0                   
    0x5008, //  3: in     pins, 8         side 0     
    0x1803, //  4: jmp    3               side 1     
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program triggered_analog_program = {
    .instructions = triggered_analog_program_instructions,
    .length = 5,
    .origin = -1,
};

static inline pio_sm_config triggered_analog_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + triggered_analog_wrap_target, offset + triggered_analog_wrap);
    sm_config_set_sideset(&c, 2, true, false);
    return c;
}

static inline void triggered_analog_program_init(PIO pio, uint sm, uint offset, uint pin_base, uint side_set, float clkdiv) {
    pio_sm_config c = triggered_analog_program_get_default_config(offset);
    sm_config_set_sideset_pins(&c, side_set);
	sm_config_set_sideset(&c, 2, true, false);
	pio_gpio_init(pio, side_set);
    // Set the IN base pin to the provided `pin_base` parameter
    sm_config_set_in_pins(&c, pin_base);
    // Set the pin directions to input at the PIO
    pio_sm_set_consecutive_pindirs(pio, sm, pin_base, 8, false);
	pio_sm_set_consecutive_pindirs(pio, sm, side_set, 1, true);
    // Set clock divider
    sm_config_set_clkdiv(&c, clkdiv);
    // Shifting to left.
    sm_config_set_in_shift(
        &c,
        false, // Shift-to-right = false (i.e. shift to left)
        true,  // Autopush enabled
        8      // Autopush threshold = 8
    );
    // We only receive, so disable the TX FIFO to make the RX FIFO deeper.
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);
    // Load our configuration, and start the program from the beginning
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true); 
}

#endif

